@startuml overview architecture
component DatingApp {
    component application_layer {
        [controllers]
        [DTOs]
    }

    component use_case_layer {
         [services]
    }

    component cache_layer {
        [Cache]
    }

    component data_access_layer {
        [repositories]
        [unit_of_work]
        [database_context]
    }

    component Domain_Layer {
        [entities]
        [repository_interfaces]
    }

    application_layer --> use_case_layer
    use_case_layer --> data_access_layer
    use_case_layer --> cache_layer
    data_access_layer ..> Domain_Layer : Implements
}
@enduml

@startuml domain_layer
component domain_Layer {
    component entities {
        class User {
            +int Id
            +string email
            +string password
            +boolean isActive
        }
        class Profile {
            +int Id
            +int userID
            +string username
            +string bio
            +enum gender
            +Date birthdate
            +string location
            }
        class Photo {
            +int Id
            +string url
            +int order

            +int profileId
        }

        class Swipe {
            +int Id
            +enum action
            +Date date

            +int swiperId
            +int swipedId
            +Date createdAt
        }
        class Match {
            +int Id
            +Date createdAt
            +boolean isActive
        }
        class Message {
            +int Id
            +string content
            +Date createdAt
            +boolean isRead

            +int senderId
            +int matchId
        }
        class Notification {
            +int Id
            +string content
            +Date createdAt
            +boolean isRead
            +enum type

            +int userId
        }
        class Preference {
            +int Id
            +int profileId
            +int minAge
            +int maxAge
            +int maxDistance
            +enum gender_preference
        }
        class Subcription {
            +int Id
            +Date startDate
            +Date endDate
            +enum plan
            +boolean isActive

            +int userId
        }
        class Report {
            +int Id
            +string reason
            +Date createdAt

            +int reporterId
            +int reportedId
        }
        class Block {
            +int Id
            +Date createdAt

            +int blockerId
            +int blockedId
        }
    }
    package repository_interfaces {
        interface IRepository<T> {
            + {abstract} GetById(id: int): T
            + {abstract} GetAll(): IEnumerable<T>
            + {abstract} Add(entity: T): void
            + {abstract} Update(entity: T): void
            + {abstract} Delete(entity: T): void
        }

        interface IUserRepository extends IRepository<User> {
            + FindByEmail(email: string): User
            + FindActiveUsers(): IEnumerable<User>
            + GetWithProfile(userId: int): User
        }

        interface IProfileRepository extends IRepository<Profile> {
            + UpdateBio(userId: int, newBio: string): void
            + GetWithPhotos(profileId: int): Profile
        }

        interface ISwipeRepository extends IRepository<Swipe> {
            + GetRecentSwipes(userId: int, days: int): IEnumerable<Swipe>
            + GetMutualSwipes(user1Id: int, user2Id: int): IEnumerable<Swipe>
        }
    }

    repository_interfaces ..> entities : Dependency
}
@enduml

@startuml data_access_layer
component data_access_layer {
    package database_context {
        class SqlAlchemyDbContext {
            + Session: scoped_session
            + engine: Engine
            + Model: declarative_base
            + init_db()
            + drop_all()
        }
    }

    package repositories {

        abstract class BaseRepository<T> {
            # _context: DbContext
            # _strategies: List<IQueryStrategy<T>>
            + AddStrategy(strategy: IQueryStrategy<T>): void
            + RemoveStrategy(strategyType: Type): void
'            + {template} Find(): IEnumerable<T>
            # {abstract} GetBaseQuery(): IQueryable<T>
        }

        class UserRepository extends BaseRepository<User> {
            + FindByEmail(email: string): User
            + FindActiveUsers(): IEnumerable<User>
            + GetWithProfile(userId: int): User
        }

        class ProfileRepository extends BaseRepository<Profile> {
            + UpdateBio(userId: int, newBio: string): void
            + GetWithPhotos(profileId: int): Profile
        }

        class SwipeRepository extends BaseRepository<Swipe> {
            + GetRecentSwipes(userId: int, days: int): IEnumerable<Swipe>
            + GetMutualSwipes(user1Id: int, user2Id: int): IEnumerable<Swipe>
        }

    }

    package unit_of_work {
        class UnitOfWork {
            + { context_manager } start() : void
            + flush() : void
            + users: IUserRepository
            + profiles: IProfileRepository
            + swipes: ISwipeRepository
        }
    }

    package strategies {
        interface IQueryStrategy<T> {
            + {abstract} Apply(query: IQueryable<T>): IQueryable<T>
        }

        class GenderFilterStrategy implements IQueryStrategy<User> {
            - _gender: GenderType
            + Apply(query: IQueryable<User>): IQueryable<User>
        }

        class LocationFilterStrategy implements IQueryStrategy<User> {
            - _radius: int
            - _coordinates: GeoPoint
            + Apply(query: IQueryable<User>): IQueryable<User>
        }
    }

    database_context --> repositories : Provides session
    repositories --> strategies : Uses
    BaseRepository ..> IQueryStrategy : depends on
    UnitOfWork --> repositories : Manages
    UnitOfWork --> database_context : Uses session

    }


    component Domain_Layer {
        package Repository_Interfaces {
            interface IRepository<T> {
                + {abstract} GetById(id: int): T
                + {abstract} GetAll(): IEnumerable<T>
                + {abstract} Add(entity: T): void
                + {abstract} Update(entity: T): void
                + {abstract} Delete(entity: T): void
            }

            interface IUserRepository extends IRepository<User> {
                + FindByEmail(email: string): User
                + FindActiveUsers(): IEnumerable<User>
                + GetWithProfile(userId: int): User
            }

            interface IProfileRepository extends IRepository<Profile> {
                + UpdateBio(userId: int, newBio: string): void
                + GetWithPhotos(profileId: int): Profile
            }

            interface ISwipeRepository extends IRepository<Swipe> {
                + GetRecentSwipes(userId: int, days: int): IEnumerable<Swipe>
                + GetMutualSwipes(user1Id: int, user2Id: int): IEnumerable<Swipe>
            }
        }

    }

    BaseRepository ..|> IRepository
    UserRepository ..|> IUserRepository
    ProfileRepository ..|> IProfileRepository
    SwipeRepository ..|> ISwipeRepository

@enduml

@startuml use_case_layer
component use_case_layer {

    abstract class BaseService {
        -_uow: UnitOfWork
    }

    class UserService <<Service>> extends BaseService{
        +register_user(dto: UserDTO): UserDTO
        +verify_email(token: str): bool
    }

    class MatchService <<Service>> extends BaseService {
        -_cache: RedisCache <<optional>>
        +calculate_compatibility(user1: User, user2: User): float
        +generate_superlike_pool(user_id: int): List[UserDTO]
    }

    class SwipeService <<Service>> extends BaseService {
        +swipe_user(swiper_id: int, swiped_id: int, action: SwipeAction): MatchResultDTO
    }

    class ReportAndBlockService <<Service>> extends BaseService {
        +report_user(reporter_id: int, reported_id: int, reason: str): bool
        +block_user(blocker_id: int, blocked_id: int): bool
    }
}

component domain_layer {
    object entities
    object repository_interfaces
}

component data_access_layer {
    class UnitOfWork
    package repositories {}
    package database_context {
        class SqlAlchemyDbContext
    }
}
component application_layer {
    object controllers
    object mappers
    object DTOs
    component middleware {
        class AuthMiddleware
        class LoggingMiddleware
    }
}

component cache_layer {
}


' Relationships
controllers --> BaseService
controllers --> mappers

UserService --> UnitOfWork
MatchService --> UnitOfWork
ReportAndBlockService --> UnitOfWork
SwipeService --> UnitOfWork
MatchService --> cache_layer

mappers --> entities
mappers --> DTOs

AuthMiddleware --> controllers
LoggingMiddleware --> controllers

UnitOfWork --> database_context
UnitOfWork --> repositories

repositories ..|> repository_interfaces
repository_interfaces --> entities

' Notes
note bottom of SqlAlchemyDbContext: Singleton pattern để đảm bảo\nchỉ có 1 instance context trong toàn ứng dụng
note bottom of AuthMiddleware: Sử dụng JWT để xác thực\nvà phân quyền người dùng
note bottom of UserService: Chứa toàn bộ logic nghiệp vụ\nliên quan đến người dùng
note bottom of MatchService: Sử dụng cache để tối ưu\nhiệu năng matching algorithm
note bottom of controllers: Nhận request HTTP\nvà trả về response JSON
note bottom of mappers: Chuyển đổi giữa Entity\nvà DTO để tách biệt các layer

@enduml

@startuml application_layer

' Định nghĩa package chính cho Application Layer
package application_layer {

    ' Package Controllers
    package controllers {
        class UserController {
            + register_user(request: Request): Response
            + verify_email(request: Request): Response
            + get_user_profile(request: Request): Response
            + update_user_profile(request: Request): Response
        }

        class MatchController {
            + get_matches(request: Request): Response
            + get_superlike_pool(request: Request): Response
        }

        class SwipeController {
            + swipe_user(request: Request): Response
        }

        class ReportAndBlockController {
            + report_user(request: Request): Response
            + block_user(request: Request): Response
        }
    }

    ' Package Middleware
    package middlewares {
        class AuthMiddleware {
            + before_request(request: Request): Optional[Response]
            + after_request(response: Response): Response
        }

        class LoggingMiddleware {
            + before_request(request: Request): Optional[Response]
            + after_request(response: Response): Response
        }
    }

    ' Package Logging
    package PyLog {
        class PyLogger {
            + log_request(request: Request)
            + log_response(response: Response)
            + log_error(error: Exception)
        }
    }

    ' Package Routing
    package routing {
    class Route {
        + path
        + handler
        + methods
    }

    class Router {
        + prefix
        + add_route()
        + group()
        + generate_routes()
    }

    class Blueprint <<built-in>> {
        + add_url_rule()
    }

    Router "1" o-- "0..*" Route : contains
    Router "0..1" -- "0..1" Router : parent >
    Router "1" o-- "0..*" Blueprint : manages
    Router ..> Blueprint : creates

    Router o-- AuthMiddleware
    Router o-- LoggingMiddleware
    }

    ' Package Mappers
'    package mappers {
'        class UserMapper {
'            + to_dto(user: User): UserDTO
'            + to_entity(user_dto: UserDTO): User
'        }
'
'        class ProfileMapper {
'            + to_dto(profile: Profile): ProfileDTO
'            + to_entity(profile_dto: ProfileDTO): Profile
'        }
'
'        class SwipeMapper {
'            + to_dto(swipe: Swipe): SwipeDTO
'            + to_entity(swipe_dto: SwipeDTO): Swipe
'        }
'    }

    ' Package DTOs
    package "DTOs" {
        class UserDTO
        class ProfileDTO
        class SwipeDTO
        class MatchResultDTO
    }

    package containers {
    }
}

' Định nghĩa các mối quan hệ giữa các package trong Application Layer
'controllers --> mappers : "Uses"
controllers --> DTOs : "Uses"
'mappers --> DTOs : "Maps to/from"
middlewares --> controllers : "Wraps"
routing --> controllers : "Routes to"
PyLogger --> middlewares : "Used by"
PyLogger --> controllers : "Used by"
controllers ..> containers : "Depends on"

' Định nghĩa các thành phần bên ngoài (external dependencies)
component domain_layer {
    object entities
}

component use_case_layer {
    object services
}

' Mối quan hệ với các layer khác
controllers --> services : "Calls"
'mappers --> entities : "Depends on"

' Ghi chú để giải thích chức năng của từng package
note bottom of controllers
    Xử lý HTTP requests và responses
end note

note bottom of middlewares
    Xử lý authentication, logging, v.v.
end note

note bottom of PyLogger
    Ghi log cho toàn bộ ứng dụng
end note

note bottom of routing
    Điều hướng requests đến controllers
end note

'note bottom of mappers
'    Chuyển đổi giữa Entities và DTOs
'end note

note bottom of DTOs
    Data Transfer Objects cho API
end note

note bottom of containers
    Package quản lý di cho toàn bộ app
end note

@enduml
